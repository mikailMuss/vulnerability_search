import requests
import psycopg2
from datetime import datetime

DB_NAME = "vulnerabilities_data"
DB_USER = "ali_ibrahimli"
DB_PASSWORD = "mj5bnuwvAPA4"
DB_HOST = "192.168.13.21"
DB_PORT = "5432"


def connect_db():
    try:
        conn = psycopg2.connect(
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT
        )
        return conn
    except Exception as e:
        print(f"Error connecting to the database: {e}")
        return None


def cve_exists(conn, cve_id):
    try:
        with conn.cursor() as cur:
            cur.execute(
                """
                SELECT nvd_nist_cve_desc_seq FROM nvd_nist_cve_desc WHERE cve_id = %s;
                """, (cve_id,)
            )
            return cur.fetchone() is not None
    except Exception as e:
        print(f"Error checking for CVE existence: {e}")
        conn.rollback()
        return False


def insert_cve_description(conn, cve_id, description, publish_date, cvss3_score):
    scrap_date = datetime.now()

    if cve_exists(conn, cve_id):
        print(f"CVE {cve_id} already exists in the database. Skipping insertion.")
        return None

    try:
        with conn.cursor() as cur:
            cur.execute(
                """
                INSERT INTO nvd_nist_cve_desc (cve_id, cve_desc, cve_publish_date, cve_cvss3_score, scrap_date)
                VALUES (%s, %s, %s, %s, %s)
                RETURNING nvd_nist_cve_desc_seq;
                """,
                (cve_id, description, publish_date, cvss3_score, scrap_date)
            )
            conn.commit()
            return cur.fetchone()[0]
    except Exception as e:
        print(f"Error inserting CVE description: {e}")
        conn.rollback()
        return None


def keyword_exists(conn, keyword, cve_desc_seq):
    try:
        with conn.cursor() as cur:
            cur.execute(
                """
                SELECT cve_keyword FROM nvd_nist_cve_keywords 
                WHERE cve_keyword = %s AND nvd_nist_cve_desc_seq = %s;
                """, (keyword, cve_desc_seq)
            )
            return cur.fetchone() is not None
    except Exception as e:
        print(f"Error checking for keyword existence: {e}")
        conn.rollback()
        return False


def insert_cve_keywords(conn, keyword, cve_desc_seq):
    scrap_date = datetime.now()

    if keyword_exists(conn, keyword, cve_desc_seq):
        print(f"Keyword '{keyword}' for CVE description ID {cve_desc_seq} already exists. Skipping insertion.")
        return

    try:
        with conn.cursor() as cur:
            cur.execute(
                """
                INSERT INTO nvd_nist_cve_keywords (cve_keyword, nvd_nist_cve_desc_seq, scrap_date)
                VALUES (%s, %s, %s);
                """,
                (keyword, cve_desc_seq, scrap_date)
            )
            conn.commit()
    except Exception as e:
        print(f"Error inserting CVE keyword: {e}")
        conn.rollback()


def search_cve(keyword, conn):
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={keyword}"

    headers = {
        'User-Agent': 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'
    }

    try:
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            cve_data = response.json()

            results = cve_data.get('vulnerabilities', [])

            if len(results) > 0:
                print(f"Found {len(results)} vulnerabilities for '{keyword}':\n")

                for item in results:
                    cve = item.get('cve', {})
                    cve_id = cve.get('id', 'N/A')
                    description = cve.get('descriptions', [])[0].get('value', 'N/A')
                    published_date = cve.get('published', 'N/A')
                    cvss3_score = cve.get('metrics', {}).get('cvssMetricV31', [{}])[0].get('cvssData', {}).get(
                        'baseScore', 'N/A')

                    cve_desc_seq = insert_cve_description(conn, cve_id, description, published_date, cvss3_score)

                    if cve_desc_seq:
                        insert_cve_keywords(conn, keyword, cve_desc_seq)

                    print(f"CVE ID: {cve_id}")
                    print(f"Description: {description}")
                    print(f"Published Date: {published_date}")
                    print(f"CVSS3 Score: {cvss3_score}")
                    print("-" * 80)

                print("All data inserted into the database.")
            else:
                print(f"No vulnerabilities found for '{keyword}'.")
        else:
            print(f"Failed to fetch data. HTTP Status Code: {response.status_code}")

    except Exception as e:
        print(f"An error occurred: {e}")


if __name__ == "__main__":
    keyword = input("Enter the keyword (e.g., PHP, PHP v4.0): ")

    conn = connect_db()
    if conn:
        try:
            search_cve(keyword, conn)
        finally:
            conn.close()