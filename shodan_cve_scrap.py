import requests
import json
import psycopg2
from psycopg2 import sql
from datetime import datetime

# Database connection details
DB_IP_ADDRESS = '192.168.13.21'
DB_PORT = 5432
DB_NAME = 'vulnerabilities_data'
DB_USERNAME = 'cti_admin'
DB_PASSWORD = 'OkIDbNBo61k6'


# URL to fetch the JSON data


def fetch_json():
    """Fetch the JSON data from the given URL."""
    url = "https://cvedb.shodan.io/cves"
    response = requests.get(url)
    response.raise_for_status()  # Will raise an exception for HTTP errors
    return response.json()


def connect_db():
    """Establish a connection to the PostgreSQL database."""
    conn = psycopg2.connect(
        dbname=DB_NAME,
        user=DB_USERNAME,
        password=DB_PASSWORD,
        host=DB_IP_ADDRESS,
        port=DB_PORT
    )
    return conn


def cve_exists(conn, cve_id):
    try:
        with conn.cursor() as cur:
            cur.execute(
                """
                SELECT shodan_cve_main_seq FROM shodan_cve_main WHERE cve_id = %s;
                """, (cve_id,)
            )
            cve_id_seq = cur.fetchone()
            if cve_id_seq is not None:
                return cve_id_seq[0]
            else:
                return None
    except Exception as e:
        print("File: shodan_cve_scrap; Function: cve_exists; Exception: ", e)
        conn.rollback()
        return None


def reference_exists(conn, shodan_cve_main_seq, reference_link):
    try:
        with conn.cursor() as cur:
            cur.execute(
                """
                SELECT reference_link FROM shodan_cve_references WHERE shodan_cve_main_seq = %s AND reference_link = %s;
                """, (str(shodan_cve_main_seq), reference_link,)
            )
            return cur.fetchone() is not None
    except Exception as e:
        print("File: shodan_cve_scrap; Function: reference_exists; Exception: ", e)
        conn.rollback()
        return None


def ransomware_campaign_exists(conn, shodan_cve_main_seq, ransomware_campaign):
    try:
        with conn.cursor() as cur:
            cur.execute(
                """
                SELECT ransomware_campaign FROM shodan_cve_ransomware_campaign WHERE shodan_cve_main_seq = %s AND ransomware_campaign = %s;
                """, (str(shodan_cve_main_seq), ransomware_campaign,)
            )
            return cur.fetchone() is not None
    except Exception as e:
        print("File: shodan_cve_scrap; Function: reference_exists; Exception: ", e)
        conn.rollback()
        return None


def insert_main_entry(conn, entry):
    main_insert_query = """
    INSERT INTO shodan_cve_main (
        cve_id, summary, cvss, cvss_version, cvss_v2, cvss_v3, epss, ranking_epss, 
        kev, propose_action, published_time, scrap_date
    ) VALUES (
        %(cve_id)s, %(summary)s, %(cvss)s, %(cvss_version)s, %(cvss_v2)s, %(cvss_v3)s, %(epss)s, %(ranking_epss)s, 
        %(kev)s, %(propose_action)s, %(published_time)s, %(scrap_date)s
    )
    RETURNING shodan_cve_main_seq;
    """
    cve_id = cve_exists(conn, entry['cve_id'])
    if cve_id:
        print(f"CVE {entry['cve_id']} already exists in the database. Skipping insertion.")
        return cve_id
    try:
        with conn.cursor() as cur:
            cur.execute(main_insert_query, entry)
            conn.commit()
            return cur.fetchone()[0]
    except Exception as e:
        print("File: shodan_cve_scrap; Function: insert_main_entry; Exception: ", e)
        conn.rollback()
        return None


def insert_references_entry(conn, entry):
    reference_insert_query = """
    INSERT INTO shodan_cve_references (
        shodan_cve_main_seq, reference_link, scrap_date
    ) VALUES (
        %(shodan_cve_main_seq)s, %(reference_link)s, %(scrap_date)s
    )
    """
    if reference_exists(conn, entry['shodan_cve_main_seq'], entry['reference_link']):
        print(f"Already exists in the database. Skipping insertion.")
        return
    try:
        with conn.cursor() as cur:
            cur.execute(reference_insert_query, entry)
            conn.commit()
    except Exception as e:
        print("File: shodan_cve_scrap; Function: insert_references_entry; Exception: ", e)
        conn.rollback()


def insert_ransomware_entry(conn, entry):
    ransomware_insert_query = """
    INSERT INTO shodan_cve_ransomware_campaign (
        shodan_cve_main_seq, ransomware_campaign, scrap_date
    ) VALUES (
        %(shodan_cve_main_seq)s, %(ransomware_campaign)s, %(scrap_date)s
    )
    """
    if ransomware_campaign_exists(conn, entry['shodan_cve_main_seq'], entry['ransomware_campaign']):
        print(f"Already exists in the database. Skipping insertion.")
        return
    try:
        with conn.cursor() as cur:
            cur.execute(ransomware_insert_query, entry)
            conn.commit()
    except Exception as e:
        print("File: shodan_cve_scrap; Function: insert_ransomware_entry; Exception: ", e)
        conn.rollback()


def insert_vuln_data(conn, data):
    for vuln in data['cves']:
        # Preparing data for insertion
        vuln_data = {
            'cve_id': vuln.get('cve_id'),
            'summary': vuln.get('summary'),
            'cvss': str(vuln.get('cvss')) if vuln.get('cvss') else '',
            'cvss_version': str(vuln.get('cvss_version')) if vuln.get('cvss_version') else '',
            'cvss_v2': str(vuln.get('cvss_v2')) if vuln.get('cvss_v2') else '',
            'cvss_v3': str(vuln.get('cvss_v3')) if vuln.get('cvss_v3') else '',
            'epss': str(vuln.get('epss')) if vuln.get('epss') else '',
            'ranking_epss': str(vuln.get('ranking_epss')) if vuln.get('ranking_epss') else '',
            'kev': vuln.get('kev'),
            'propose_action': str(vuln.get('propose_action')) if vuln.get('propose_action') else '',
            'published_time': vuln.get('published_time').replace('T', ' '),
            'scrap_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }

        main_seq = insert_main_entry(conn, vuln_data)
        if main_seq is None:
            continue
        try:
            if vuln.get('ransomware_campaign') is not None and vuln.get('ransomware_campaign') != 'Unknown':
                ransomware_campaign_data = {
                    'shodan_cve_main_seq': main_seq,
                    'ransomware_campaign': vuln.get('ransomware_campaign'),
                    'scrap_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                insert_ransomware_entry(conn, ransomware_campaign_data)
        except Exception as e:
            print("File: shodan_cve_scrap; Function: insert_vuln_data; Tag: 1; Exception: ", e)

        try:
            for reference_link in vuln.get('references'):
                reference_data = {
                    'shodan_cve_main_seq': main_seq,
                    'reference_link': reference_link,
                    'scrap_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
                insert_references_entry(conn, reference_data)
        except Exception as e:
            print("File: shodan_cve_scrap; Function: insert_vuln_data; Tag: 2; Exception: ", e)

def main(conn):
    # Fetch the JSON data
    data = fetch_json()
    insert_vuln_data(conn, data)


if __name__ == "__main__":
    conn = connect_db()
    try:
        main(conn)
    except Exception as e:
        print("File: shodan_cve_scrap; Function: main; Exception: ", e)
    finally:
        conn.close()
