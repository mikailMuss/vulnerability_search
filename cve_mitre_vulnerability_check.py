import requests
import psycopg2
from datetime import datetime
from bs4 import BeautifulSoup

DB_NAME = "vulnerabilities_data"
DB_USER = "cti_admin"
DB_PASSWORD = "OkIDbNBo61k6"
DB_HOST = "192.168.13.21"
DB_PORT = "5432"


class CVEManager:
    def __init__(self):
        self.conn = self.connect_db()

    def connect_db(self):
        try:
            conn = psycopg2.connect(
                dbname=DB_NAME,
                user=DB_USER,
                password=DB_PASSWORD,
                host=DB_HOST,
                port=DB_PORT
            )
            return conn
        except Exception as e:
            print(f"Error connecting to the database: {e}")
            return None

    def cve_exists(self, cve_id):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT cve_mitre_desc_seq FROM cve_mitre_desc WHERE cve_id = %s;
                    """, (cve_id,)
                )
                return cur.fetchone() is not None
        except Exception as e:
            print(f"Error checking for CVE existence: {e}")
            self.conn.rollback()
            return False

    def insert_cve_description(self, cve_id, description):
        scrap_date = datetime.now()

        if self.cve_exists(cve_id):
            print(f"CVE {cve_id} already exists in the database. Skipping insertion.")
            return None

        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO cve_mitre_desc (cve_id, cve_desc, scrap_date)
                    VALUES (%s, %s, %s)
                    RETURNING cve_mitre_desc_seq;
                    """,
                    (cve_id, description, scrap_date)
                )
                self.conn.commit()
                return cur.fetchone()[0]
        except Exception as e:
            print(f"Error inserting CVE description: {e}")
            self.conn.rollback()
            return None

    def keyword_exists(self, keyword, cve_desc_seq):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT cve_keyword FROM cve_mitre_keywords 
                    WHERE cve_keyword = %s AND cve_mitre_desc_seq = %s;
                    """, (keyword, cve_desc_seq)
                )
                return cur.fetchone() is not None
        except Exception as e:
            print(f"Error checking for keyword existence: {e}")
            self.conn.rollback()
            return False

    def insert_cve_keywords(self, keyword, cve_mitre_desc_seq):
        scrap_date = datetime.now()

        if self.keyword_exists(keyword, cve_mitre_desc_seq):
            print(f"Keyword '{keyword}' for CVE description ID {cve_mitre_desc_seq} already exists. Skipping insertion.")
            return

        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO cve_mitre_keywords (cve_keyword, cve_mitre_desc_seq, scrap_date)
                    VALUES (%s, %s, %s);
                    """,
                    (keyword, cve_mitre_desc_seq, scrap_date)
                )
                self.conn.commit()
        except Exception as e:
            print(f"Error inserting CVE keyword: {e}")
            self.conn.rollback()

    def get_cve_data_for_keyword(self, keyword):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT cve_mitre_desc.cve_id, cve_desc
                    FROM cve_mitre_keywords
                    JOIN cve_mitre_desc ON cve_mitre_keywords.cve_mitre_desc_seq = cve_mitre_desc.cve_mitre_desc_seq
                    WHERE cve_keyword = %s;
                    """, (keyword,)
                )
                return cur.fetchall()
        except Exception as e:
            print(f"Error fetching CVE data for keyword: {e}")
            self.conn.rollback()
            return None

    def search_cve(self, keyword):
        # url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={keyword}"
        url = 'https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=' + keyword.replace(' ', '+')
        headers = {
            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'
        }

        try:
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                tables = soup.find_all('table', {'cellpadding': '0', 'cellspacing': '0', 'border': '0'})
                cve_data = []
                for table in tables:
                    headers = table.find('thead').find_all('th')
                    header_texts = [header.text.strip() for header in headers]
                    print(header_texts)
                    if 'Name' not in header_texts and 'Description' not in header_texts:
                        continue
                    print('Needed table to parse')
                    # Iterate over the table rows to extract the CVE ID and Description
                    for row in table.find_all('tr')[1:]:  # Skip the header row
                        cve_id = row.find('a').text.strip()
                        description = row.find_all('td')[1].text.strip()
                        # print(f"CVE ID: {cve_id}")
                        # print(f"Description: {description}")
                        # print("-" * 80)
                        cve_data.append({'CVE_ID': cve_id, 'Description': description})
                        cve_desc_seq = self.insert_cve_description(cve_id, description)

                        if cve_desc_seq:
                            self.insert_cve_keywords(keyword, cve_desc_seq)
                    break
                if len(cve_data) == 0:
                    raise Exception("No data available")
                return cve_data
            else:
                print(f"Failed to fetch data. HTTP Status Code: {response.status_code}")
                return None
        except Exception as e:
            print(f"An error occurred (search_cve func): {e}")
            return None

    def fetch_and_display_keyword_data(self, keyword):
        results = self.get_cve_data_for_keyword(keyword)
        cve_data = []
        try:
            if results:
                print(f"Found {len(results)} vulnerabilities in the database for '{keyword}':\n")
                for row in results:
                    cve_id, description = row
                    # print(f"CVE ID: {cve_id}")
                    # print(f"Description: {description}")
                    # print("-" * 80)
                    cve_data.append({'CVE_ID': cve_id, 'Description': description})
                return cve_data
            else:
                print(f"No data found for '{keyword}' in the database. Fetching from external API...")
                return self.search_cve(keyword)
        except Exception as e:
            print(f"An error occurred (fetch_and_display_keyword_data func): {e}")
            return None


if __name__ == "__main__":
    keyword = input("Enter the keyword (e.g., PHP, PHP v4.0): ")

    cve_manager = CVEManager()

    if cve_manager.conn:
        try:
            vuln_cve_data = cve_manager.fetch_and_display_keyword_data(keyword)
        finally:
            cve_manager.conn.close()
    for cve in vuln_cve_data:
        print(cve)