import requests
import psycopg2
from datetime import datetime
from bs4 import BeautifulSoup

DB_NAME = "vulnerabilities_data"
DB_USER_CVE = "cti_admin"
DB_PASSWORD_CVE = "OkIDbNBo61k6"
DB_USER_NVD = "ali_ibrahimli"
DB_PASSWORD_NVD = "mj5bnuwvAPA4"
DB_HOST = "192.168.13.21"
DB_PORT = "5432"

class CVE:
    def __init__(self):
        self.conn = self.connect_db()

    def connect_db(self):
        try:
            conn = psycopg2.connect(
                dbname=DB_NAME,
                user=DB_USER_CVE,
                password=DB_PASSWORD_CVE,
                host=DB_HOST,
                port=DB_PORT
            )
            return conn
        except Exception as e:
            print(f"Error connecting to the database: {e}")
            return None

    def cve_exists(self, cve_id):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT cve_mitre_desc_seq FROM cve_mitre_desc WHERE cve_id = %s;
                    """, (cve_id,)
                )
                return cur.fetchone() is not None
        except Exception as e:
            print(f"Error checking for CVE existence: {e}")
            self.conn.rollback()
            return False

    def insert_cve_description(self, cve_id, description):
        scrap_date = datetime.now()

        if self.cve_exists(cve_id):
            print(f"CVE {cve_id} already exists in the database. Skipping insertion.")
            return None

        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO cve_mitre_desc (cve_id, cve_desc, scrap_date)
                    VALUES (%s, %s, %s)
                    RETURNING cve_mitre_desc_seq;
                    """,
                    (cve_id, description, scrap_date)
                )
                self.conn.commit()
                return cur.fetchone()[0]
        except Exception as e:
            print(f"Error inserting CVE description: {e}")
            self.conn.rollback()
            return None

    def keyword_exists(self, keyword, cve_desc_seq):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT cve_keyword FROM cve_mitre_keywords 
                    WHERE cve_keyword = %s AND cve_mitre_desc_seq = %s;
                    """, (keyword, cve_desc_seq)
                )
                return cur.fetchone() is not None
        except Exception as e:
            print(f"Error checking for keyword existence: {e}")
            self.conn.rollback()
            return False

    def insert_cve_keywords(self, keyword, cve_mitre_desc_seq):
        scrap_date = datetime.now()

        if self.keyword_exists(keyword, cve_mitre_desc_seq):
            print(f"Keyword '{keyword}' for CVE description ID {cve_mitre_desc_seq} already exists. Skipping insertion.")
            return

        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO cve_mitre_keywords (cve_keyword, cve_mitre_desc_seq, scrap_date)
                    VALUES (%s, %s, %s);
                    """,
                    (keyword, cve_mitre_desc_seq, scrap_date)
                )
                self.conn.commit()
        except Exception as e:
            print(f"Error inserting CVE keyword: {e}")
            self.conn.rollback()

    def get_cve_data_for_keyword(self, keyword):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT cve_mitre_desc.cve_id, cve_desc
                    FROM cve_mitre_keywords
                    JOIN cve_mitre_desc ON cve_mitre_keywords.cve_mitre_desc_seq = cve_mitre_desc.cve_mitre_desc_seq
                    WHERE cve_keyword = %s;
                    """, (keyword,)
                )
                return cur.fetchall()
        except Exception as e:
            print(f"Error fetching CVE data for keyword: {e}")
            self.conn.rollback()
            return None

    def search_cve(self, keyword):
        url = 'https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=' + keyword.replace(' ', '+')
        headers = {
            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'
        }

        try:
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                tables = soup.find_all('table', {'cellpadding': '0', 'cellspacing': '0', 'border': '0'})
                cve_data = []
                for table in tables:
                    headers = table.find('thead').find_all('th')
                    header_texts = [header.text.strip() for header in headers]
                    print(header_texts)
                    if 'Name' not in header_texts and 'Description' not in header_texts:
                        continue
                    print('Needed table to parse')
                    for row in table.find_all('tr')[1:]:
                        cve_id = row.find('a').text.strip()
                        description = row.find_all('td')[1].text.strip()
                        cve_data.append({'CVE_ID': cve_id, 'Description': description})
                        cve_desc_seq = self.insert_cve_description(cve_id, description)

                        if cve_desc_seq:
                            self.insert_cve_keywords(keyword, cve_desc_seq)
                    break
                if len(cve_data) == 0:
                    raise Exception("No data available")
                return cve_data
            else:
                print(f"Failed to fetch data. HTTP Status Code: {response.status_code}")
                return None
        except Exception as e:
            print(f"An error occurred (search_cve func): {e}")
            return None

    def fetch_and_display_keyword_data(self, keyword):
        results = self.get_cve_data_for_keyword(keyword)
        cve_data = []
        try:
            if results:
                print(f"Found {len(results)} vulnerabilities in the database for '{keyword}':\n")
                for row in results:
                    cve_id, description = row
                    cve_data.append({'CVE_ID': cve_id, 'Description': description})
                return cve_data
            else:
                print(f"No data found for '{keyword}' in the database. Fetching from external API...")
                return self.search_cve(keyword)
        except Exception as e:
            print(f"An error occurred (fetch_and_display_keyword_data func): {e}")
            return None


class NVD:
    def __init__(self):
        self.conn = self.connect_db()

    def connect_db(self):
        try:
            conn = psycopg2.connect(
                dbname=DB_NAME,
                user=DB_USER_NVD,
                password=DB_PASSWORD_NVD,
                host=DB_HOST,
                port=DB_PORT
            )
            return conn
        except Exception as e:
            print(f"Error connecting to the database: {e}")
            return None

    def cve_exists(self, cve_id):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT nvd_nist_cve_desc_seq FROM nvd_nist_cve_desc WHERE cve_id = %s;
                    """, (cve_id,)
                )
                return cur.fetchone() is not None
        except Exception as e:
            print(f"Error checking for CVE existence: {e}")
            self.conn.rollback()
            return False

    def insert_cve_description(self, cve_id, description, publish_date, cvss3_score):
        scrap_date = datetime.now()

        if self.cve_exists(cve_id):
            print(f"CVE {cve_id} already exists in the database. Skipping insertion.")
            return None

        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO nvd_nist_cve_desc (cve_id, cve_desc, cve_publish_date, cve_cvss3_score, scrap_date)
                    VALUES (%s, %s, %s, %s, %s)
                    RETURNING nvd_nist_cve_desc_seq;
                    """,
                    (cve_id, description, publish_date, cvss3_score, scrap_date)
                )
                self.conn.commit()
                return cur.fetchone()[0]
        except Exception as e:
            print(f"Error inserting CVE description: {e}")
            self.conn.rollback()
            return None

    def keyword_exists(self, keyword, cve_desc_seq):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT cve_keyword FROM nvd_nist_cve_keywords 
                    WHERE cve_keyword = %s AND nvd_nist_cve_desc_seq = %s;
                    """, (keyword, cve_desc_seq)
                )
                return cur.fetchone() is not None
        except Exception as e:
            print(f"Error checking for keyword existence: {e}")
            self.conn.rollback()
            return False

    def insert_cve_keywords(self, keyword, cve_desc_seq):
        scrap_date = datetime.now()

        if self.keyword_exists(keyword, cve_desc_seq):
            print(f"Keyword '{keyword}' for CVE description ID {cve_desc_seq} already exists. Skipping insertion.")
            return

        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    INSERT INTO nvd_nist_cve_keywords (cve_keyword, nvd_nist_cve_desc_seq, scrap_date)
                    VALUES (%s, %s, %s);
                    """,
                    (keyword, cve_desc_seq, scrap_date)
                )
                self.conn.commit()
        except Exception as e:
            print(f"Error inserting CVE keyword: {e}")
            self.conn.rollback()

    def get_cve_data_for_keyword(self, keyword):
        try:
            with self.conn.cursor() as cur:
                cur.execute(
                    """
                    SELECT nvd_nist_cve_desc.cve_id, cve_desc, cve_publish_date, cve_cvss3_score
                    FROM nvd_nist_cve_keywords
                    JOIN nvd_nist_cve_desc ON nvd_nist_cve_keywords.nvd_nist_cve_desc_seq = nvd_nist_cve_desc.nvd_nist_cve_desc_seq
                    WHERE cve_keyword = %s;
                    """, (keyword,)
                )
                return cur.fetchall()
        except Exception as e:
            print(f"Error fetching CVE data for keyword: {e}")
            self.conn.rollback()
            return None

    def search_cve(self, keyword):
        url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={keyword}"
        headers = {
            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)'
        }

        try:
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                cve_data = response.json()

                results = cve_data.get('vulnerabilities', [])
                if len(results) > 0:
                    response_data = []
                    print(f"Found {len(results)} vulnerabilities for '{keyword}':\n")

                    for item in results:
                        cve = item.get('cve', {})
                        cve_id = cve.get('id', 'N/A')
                        description = cve.get('descriptions', [])[0].get('value', 'N/A')
                        published_date = cve.get('published', 'N/A')
                        cvss3_score = cve.get('metrics', {}).get('cvssMetricV31', [{}])[0].get('cvssData', {}).get(
                            'baseScore', 'N/A')

                        cve_desc_seq = self.insert_cve_description(cve_id, description, published_date, cvss3_score)

                        if cve_desc_seq:
                            self.insert_cve_keywords(keyword, cve_desc_seq)

                        response_data.append({'CVE_ID': cve_id, 'Description': description, "Published Date": published_date,
                                              "CVSS3 Score": cvss3_score})

                    print("All data inserted into the database.")
                    return response_data
                else:
                    print(f"No vulnerabilities found for '{keyword}'.")
                    return None
            else:
                print(f"Failed to fetch data. HTTP Status Code: {response.status_code}")
                return None

        except Exception as e:
            print(f"An error occurred (search_cve func): {e}")
            return None

    def fetch_and_display_keyword_data(self, keyword):
        results = self.get_cve_data_for_keyword(keyword)
        cve_data = []
        try:
            if results:
                print(f"Found {len(results)} vulnerabilities in the database for '{keyword}':\n")
                for row in results:
                    cve_id, description, publish_date, cvss3_score = row
                    cve_data.append({'CVE_ID': cve_id, 'Description': description, "Published Date": publish_date, "CVSS3 Score": cvss3_score})
                return cve_data
            else:
                print(f"No data found for '{keyword}' in the database. Fetching from external API...")
                return self.search_cve(keyword)
        except Exception as e:
            print(f"An error occurred (fetch_and_display_keyword_data func): {e}")
            return None


def main_engine():
    keyword = input("Enter the keyword (e.g., PHP, PHP v4.0): ")

    cve_manager = CVE()
    nvd_manager = NVD()

    total_cve_fetched = 0
    total_nvd_fetched = 0
    cve_saved = 0
    nvd_saved = 0
    cve_duplicates = 0
    nvd_duplicates = 0

    if cve_manager.conn and nvd_manager.conn:
        try:
            print("\n=== Fetching data from CVE ===")
            cve_data = cve_manager.fetch_and_display_keyword_data(keyword)

            if cve_data:
                total_cve_fetched = len(cve_data)
                print("\n--- Results from CVE ---")
                for cve in cve_data:
                    if "already exists" in cve['Description']:
                        cve_duplicates += 1
                    else:
                        cve_saved += 1
                    print(f"CVE_ID: {cve['CVE_ID']}")
                    print(f"Description: {cve['Description']}")
                    print("-" * 80)
            else:
                print("No CVE results found.")

            print("\n=== Fetching data from NVD ===")
            nvd_data = nvd_manager.fetch_and_display_keyword_data(keyword)

            if nvd_data:
                total_nvd_fetched = len(nvd_data)
                print("\n--- Results from NVD ---")
                for cve in nvd_data:
                    if "already exists" in cve['Description']:
                        nvd_duplicates += 1
                    else:
                        nvd_saved += 1
                    print(f"CVE_ID: {cve['CVE_ID']}")
                    print(f"Description: {cve['Description']}")
                    print(f"Published Date: {cve['Published Date']}")
                    print(f"CVSS3 Score: {cve['CVSS3 Score']}")
                    print("-" * 80)
            else:
                print("No NVD results found.")

        finally:
            cve_manager.conn.close()
            nvd_manager.conn.close()

        print("\n=== Summary ===")
        print(f"Total CVEs fetched from CVE: {total_cve_fetched}")
        print(f"Total CVEs saved to DB from CVE: {cve_saved}")
        print(f"Total duplicates skipped from CVE: {cve_duplicates}")
        print(f"Total CVEs fetched from NVD: {total_nvd_fetched}")
        print(f"Total CVEs saved to DB from NVD: {nvd_saved}")
        print(f"Total duplicates skipped from NVD: {nvd_duplicates}")


if __name__ == "__main__":
    main_engine()
